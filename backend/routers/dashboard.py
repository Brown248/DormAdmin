# backend/routers/dashboard.py
from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session
from backend.database import get_db
from backend import models

router = APIRouter(
    prefix="/dashboard",
    tags=["Dashboard"]
)

# ---------------------------------------------------------
# üß© ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard
# ---------------------------------------------------------
@router.get("/summary")
def get_dashboard_summary(dorm: str = Query("all"), db: Session = Depends(get_db)):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î / ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ / ‡∏ß‡πà‡∏≤‡∏á / ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
    ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏≠ (A, B, C) ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ
    """
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏≠ -> ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏≠
    query = db.query(models.Room)
    if dorm != "all":
        query = query.filter(models.Room.dorm_name == dorm)

    rooms = query.all()

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    total_rooms = len(rooms)
    occupied_rooms = sum(1 for r in rooms if r.is_occupied)
    vacant_rooms = total_rooms - occupied_rooms
    overdue_rooms = sum(1 for r in rooms if r.is_overdue)

    return {
        "dorm": dorm,
        "total_rooms": total_rooms,
        "occupied": occupied_rooms,
        "vacant": vacant_rooms,
        "overdue": overdue_rooms
    }


# ---------------------------------------------------------
# üßæ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
# ---------------------------------------------------------
@router.get("/overdue")
def get_overdue_rooms(dorm: str = Query("all"), db: Session = Depends(get_db)):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏≠)
    """
    query = db.query(models.Room).filter(models.Room.is_overdue == True)
    if dorm != "all":
        query = query.filter(models.Room.dorm_name == dorm)

    overdue_list = []
    for room in query.all():
        tenant = (
            db.query(models.Tenant)
            .filter(models.Tenant.room_id == room.id)
            .first()
        )
        overdue_list.append({
            "room": room.room_number,
            "tenant_name": tenant.full_name if tenant else "-",
            "phone": tenant.phone if tenant else "-",
            "amount_due": room.overdue_amount,
            "dorm": room.dorm_name
        })

    return overdue_list
